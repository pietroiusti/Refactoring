* Refactoring: A First Example
** The Starting Point
#+begin_src js
  let plays = {
    "hamlet": {"name": "Hamlet", "type": "tragedy"},
    "as-like": {"name": "As You Like It", "type": "comedy"},
    "othello": {"name": "Othello", "type": "tragedy"}
  };

  let invoices = [
    {
      "customer": "BigCo",
      "performances": [
        {
          "playID": "hamlet",
          "audience": 55
        },
        {
          "playID": "as-like",
          "audience": 35
        },
        {
          "playID": "othello",
          "audience": 40
        }
      ]
    }
  ];

  function statement (invoice, plays) {
    let totalAmount = 0;
    let volumeCredits = 0;
    let result = `Statement for ${invoice.customer}\n`;
    const format = new Intl.NumberFormat("en-US",
                                         { style: "currency", currency: "USD",
                                           minimumFractionDigits: 2 }).format;
    for (let perf of invoice.performances) {
      const play = plays[perf.playID];
      let thisAmount = 0;
      switch (play.type) {
      case "tragedy":
        thisAmount = 40000;
        if (perf.audience > 30) {
          thisAmount += 1000 * (perf.audience - 30);
        }
        break;
      case "comedy":
        thisAmount = 30000;
        if (perf.audience > 20) {
          thisAmount += 10000 + 500 * (perf.audience - 20);
        }
        thisAmount += 300 * perf.audience;
        break;
      default:
        throw new Error(`unknown type: ${play.type}`);
      }
      // add volume credits
      volumeCredits += Math.max(perf.audience - 30, 0);
      // add extra credit for every ten comedy attendees
      if ("comedy" === play.type) volumeCredits += Math.floor(perf.audience / 5);
      // print line for this order
      result += ` ${play.name}: ${format(thisAmount/100)} (${perf.audience} seats)\n`;
      totalAmount += thisAmount;
    }
    result += `Amount owed is ${format(totalAmount/100)}\n`;
    result += `You earned ${volumeCredits} credits\n`;
    return result;
  }

  let result = statement(invoices[0], plays);
  console.log(result);
#+end_src

The first step, when refactoring is having a solid set of
self-checking tests (p. 5).

In considering a long function like ~statement~, Fowler tries to
identify points that separate different parts of the overall
behavior.

The ~switch~ statement stands out. We can conclude what it does, but
we don't want to interpret it each time we go back to it. We can
therefore put it into its own function. To do so, however, we need to
look for variables that will no longer be in the scope once the code
has been extracted into its own function.

#+begin_src js
  // within the scope of statement
  function amountFor(perf, play) {
    let thisAmount = 0; // <----------------------------------
    switch (play.type) {
    case "tragedy":
      thisAmount = 40000;
      if (perf.audience > 30) {
        thisAmount += 1000 * (perf.audience - 30);
      }
      break;
    case "comedy":
      thisAmount = 30000;
      if (perf.audience > 20) {
        thisAmount += 10000 + 500 * (perf.audience - 20);
      }
      thisAmount += 300 * perf.audience;
      break;
    default:
      throw new Error(`unknown type: ${play.type}`);
    }
    return thisAmount; // <----------------------------------
  }
#+end_src

So ~statement~ can now call ~amountFor~ for populating ~thisAmount~:
#+begin_src js
  // top level
  function statement (invoice, plays) {
    let totalAmount = 0;
    let volumeCredits = 0;
    let result = `Statement for ${invoice.customer}\n`;
    const format = new Intl.NumberFormat("en-US",
                                         { style: "currency", currency: "USD",
                                           minimumFractionDigits: 2 }).format;
    for (let perf of invoice.performances) {
      const play = plays[perf.playID];
      let thisAmount = amountFor(perf, play); // <----------------------------------
      // add volume credits
      volumeCredits += Math.max(perf.audience - 30, 0);
      // add extra credit for every ten comedy attendees
      if ("comedy" === play.type) volumeCredits += Math.floor(perf.audience / 5);
      // print line for this order
      result += ` ${play.name}: ${format(thisAmount/100)} (${perf.audience} seats)\n`;
      totalAmount += thisAmount;
    }
    result += `Amount owed is ${format(totalAmount/100)}\n`;
    result += `You earned ${volumeCredits} credits\n`;
    return result;
  }
#+end_src

We should test after this change and commit to the vc system if
everything is okay.

After having performed the Extract Function operation (Cf. p. 106), we
can choose some better names. For example, ~thisAmount~ --> ~result~:
#+begin_src js
  // within the scope of statement
  function amountFor(perf, play) {
    let result = 0;// <---------------------------------------
    switch (play.type) {
    case "tragedy":
      result = 40000;// <-------------------------------------
      if (perf.audience > 30) {
        result += 1000 * (perf.audience - 30);// <------------
      }
      break;
    case "comedy":
      result = 30000;// <-------------------------------------
      if (perf.audience > 20) {
        result += 10000 + 500 * (perf.audience - 20);// <-----
      }
      result += 300 * perf.audience;// <----------------------
      break;
    default:
      throw new Error(`unknown type: ${play.type}`);
    }
    return result;// <----------------------------------------
  }
#+end_src

Again: compile, test, commit.

Let's also change the name of the first argument, by using an
indefinite article (convention from Kent Beck):
#+begin_src js
  // within the scope of statement  
  function amountFor(aPerformance, play) {// <----------------------
    let result = 0;
    switch (play.type) {
    case "tragedy":
      result = 40000;
      if (aPerformance.audience > 30) {// <-------------------------
        result += 1000 * (aPerformance.audience - 30);// <----------
      }
      break;
    case "comedy":
      result = 30000;
      if (aPerformance.audience > 20) {// <-------------------------
        result += 10000 + 500 * (aPerformance.audience - 20);// <---
      }
      result += 300 * aPerformance.audience;// <--------------------
      break;
    default:
      throw new Error(`unknown type: ${play.type}`);
    }
    return result;
  }
#+end_src
** Removing the play Variable
~play~ is computed from the performance, so it can actually be
calculated within ~amountFor~, instead of being passed as a
parameter. According to Fowler, temporary variables like ~play~
``create a lot of locally scoped names that complicate
extractions''. Let's use /Replace Temp with Query/ (178).

First, we extract the right-hand side of the assignment into a
function:
#+begin_src js
  // within statement's scope
  function playFor(aPerformance) {
    return plays[aPerformance.playID];
  }
#+end_src

#+begin_src js
  // top level
  function statement (invoice, plays) {
    let totalAmount = 0;
    let volumeCredits = 0;
    let result = `Statement for ${invoice.customer}\n`;
    const format = new Intl.NumberFormat("en-US",
                                         { style: "currency", currency: "USD",
                                           minimumFractionDigits: 2 }).format;
    for (let perf of invoice.performances) {
      const play = playFor(perf);
      let thisAmount = amountFor(perf, play);
      // add volume credits
      volumeCredits += Math.max(perf.audience - 30, 0);
      // add extra credit for every ten comedy attendees
      if ("comedy" === play.type) volumeCredits += Math.floor(perf.audience / 5);
      // print line for this order
      result += ` ${play.name}: ${format(thisAmount/100)} (${perf.audience} seats)\n`;
      totalAmount += thisAmount;
    }
    result += `Amount owed is ${format(totalAmount/100)}\n`;
    result += `You earned ${volumeCredits} credits\n`;
    return result;
#+end_src

Then compile, test, commit, and use /Inline Variable/ (123).

#+begin_src js
  // top level
  function statement (invoice, plays) {
    let totalAmount = 0;
    let volumeCredits = 0;
    let result = `Statement for ${invoice.customer}\n`;
    const format = new Intl.NumberFormat("en-US",
                                         { style: "currency", currency: "USD",
                                           minimumFractionDigits: 2 }).format;
    for (let perf of invoice.performances) {
      // const play = playFor(perf); OLD
      let thisAmount = amountFor(perf, playFor(perf)); // <----
      // add volume credits
      volumeCredits += Math.max(perf.audience - 30, 0);
      // add extra credit for every ten comedy attendees
      if ("comedy" === playFor(perf).type) volumeCredits += Math.floor(perf.audience / 5);//<--
      // print line for this order
      result += ` ${playFor(perf).name}: ${format(thisAmount/100)} (${perf.audience} seats)\n`;//<--
      totalAmount += thisAmount;
    }
    result += `Amount owed is ${format(totalAmount/100)}\n`;
    result += `You earned ${volumeCredits} credits\n`;
    return result;
#+end_src

Again: compile, test, commit. Now let's apply /Change Function
Declaration/ (124). There will be two steps. First we use the new
function inside ~amountFor~:
#+begin_src js
  // within statement's function
  function amountFor(aPerformance, play) {
    let result = 0;
    switch (playFor(aPerformance).type) { // <-----
    case "tragedy":
      result = 40000;
      if (aPerformance.audience > 30) {
        result += 1000 * (aPerformance.audience - 30);
      }
      break;
    case "comedy":
      result = 30000;
      if (aPerformance.audience > 20) {
        result += 10000 + 500 * (aPerformance.audience - 20);
      }
      result += 300 * aPerformance.audience;
      break;
    default:
      throw new Error(`unknown type: ${playFor(aPerformance).type}`); // <-----
    }
#+end_src

Two, compile, test, commit, and delete the parameter:

#+begin_src js
    // at top level
    function statement (invoice, plays) {
      let totalAmount = 0;
      let volumeCredits = 0;
      let result = `Statement for ${invoice.customer}\n`;
      const format = new Intl.NumberFormat("en-US",
                                           { style: "currency", currency: "USD",
                                             minimumFractionDigits: 2 }).format;
      for (let perf of invoice.performances) {
        // let thisAmount = amountFor(perf, playFor(perf)); OLD <------------------------
        let thisAmount = amountFor(perf); // NEW
        // add volume credits
        volumeCredits += Math.max(perf.audience - 30, 0);
        // add extra credit for every ten comedy attendees
        if ("comedy" === playFor(perf).type) volumeCredits += Math.floor(perf.audience / 5);
        // print line for this order
        result += ` ${playFor(perf).name}: ${format(thisAmount/100)} (${perf.audience} seats)\n`;
        totalAmount += thisAmount;
      }
      result += `Amount owed is ${format(totalAmount/100)}\n`;
      result += `You earned ${volumeCredits} credits\n`;
      return result;
#+end_src

#+begin_src js
  // within statement's scope
  function amountFor(aPerformance, play) {
    let result = 0;
    switch (playFor(aPerformance).type) {
    case "tragedy":
      result = 40000;
      if (aPerformance.audience > 30) {
        result += 1000 * (aPerformance.audience - 30);
      }
      break;
    case "comedy":
      result = 30000;
      if (aPerformance.audience > 20) {
        result += 10000 + 500 * (aPerformance.audience - 20);
      }
      result += 300 * aPerformance.audience;
      break;
    default:
      throw new Error(`unknown type: ${playFor(aPerformance).type}`);
    }
    return result;
  }
#+end_src

Yes: compile, test, commit.

Now, it's true that the previous code looked up the play only once in
each loop iteration. Now it does so thrice. However, according to
Fowler, (i) this is unlikely to have a performance impact, and (ii)
the changes make it easier to improve the code if we need to.

Finally:
#+begin_src js
  //top level...
  function statement (invoice, plays) {
    let totalAmount = 0;
    let volumeCredits = 0;
    let result = `Statement for ${invoice.customer}\n`;
    const format = new Intl.NumberFormat("en-US",
                                         { style: "currency", currency: "USD",
                                           minimumFractionDigits: 2 }).format;
    for (let perf of invoice.performances) {
      // add volume credits
      volumeCredits += Math.max(perf.audience - 30, 0);
      // add extra credit for every ten comedy attendees
      if ("comedy" === playFor(perf).type) volumeCredits += Math.floor(perf.audience / 5);
      // print line for this order
      result += ` ${playFor(perf).name}: ${format(amountFor(perf)/100)} (${perf.audience} seats)\n`;
      totalAmount += amountFor(perf);
    }
    result += `Amount owed is ${format(totalAmount/100)}\n`;
    result += `You earned ${volumeCredits} credits\n`;
    return result;
#+end_src
